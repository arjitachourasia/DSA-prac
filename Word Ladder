class Solution {
public:
    int ladderLength(string startWord, string targetWord, vector<string>& wordList) {
        queue<pair<string,int>> qu; //string,steps
        qu.push({startWord,1});
        unordered_set<string> st(wordList.begin(),wordList.end());
        st.erase(startWord);
        while(!qu.empty()){
            auto pr = qu.front(); qu.pop();
            string word = pr.first;
            int step = pr.second;
            if(word == targetWord) return step;
            for(int i =0;i<word.size();i++){
                char original = word[i];
                for(char ch = 'a';ch<='z';ch++ ){
                    word[i] = ch;
                    if(st.find(word) != st.end()){
                        st.erase(word);
                        qu.push({word,step+1});
                    }
                }
                word[i] = original;
            }
        }
        return 0;
    }
};
